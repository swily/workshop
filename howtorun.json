{
  "title": "OpenTelemetry Demo Cluster Setup - Actual Session Commands",
  "description": "Exact steps taken during the working session to configure the OpenTelemetry demo",
  "prerequisites": [
    "AWS EKS cluster already provisioned",
    "kubectl configured to access the cluster",
    "helm v3.x installed",
    "istioctl installed"
  ],
  "setup_steps": [
    {
      "step": 1,
      "description": "Run the base cluster configuration script",
      "commands": [
        "cd scripts",
        "./configure_cluster_base.sh"
      ]
    },
    {
      "step": 2,
      "description": "Fix Prometheus memory limits",
      "commands": [
        "cd ../patches",
        "kubectl patch deployment prometheus -n otel-demo --patch-file=prometheus-patch.yaml"
      ]
    },
    {
      "step": 3,
      "description": "Fix cart service health checks",
      "commands": [
        "kubectl patch deployment cart -n otel-demo --patch-file=cartservice-patch-updated.yaml"
      ]
    },
    {
      "step": 4,
      "description": "Update OpenTelemetry Collector for gRPC metrics",
      "commands": [
        "kubectl apply -f otel-collector-grpc-metrics-patch.yaml",
        "kubectl rollout restart deployment/otel-collector -n otel-demo"
      ]
    },
    {
      "step": 5,
      "description": "Deploy Gremlin for chaos engineering",
      "commands": [
        "helm repo add gremlin https://helm.gremlin.com",
        "helm repo update",
        "helm upgrade --install gremlin gremlin/gremlin --namespace gremlin --create-namespace -f gremlin-values-updated.yaml --set gremlin.hostPID=true --set gremlin.hostNetwork=true --set gremlin.container.driver=any"
      ]
    },
    {
      "step": 6,
      "description": "Apply Gremlin annotations to services",
      "commands": [
        "kubectl apply -f opentelemetry-demo-gremlin-annotations.yaml",
        "kubectl apply -f frontend-gremlin-annotation.yaml"
      ]
    },
    {
      "step": 7,
      "description": "Verify the setup",
      "commands": [
        "# Verify Gremlin pods are running",
        "kubectl get pods -n gremlin",
        "# Verify Gremlin daemon logs",
        "kubectl logs -n gremlin -l app.kubernetes.io/name=gremlin --tail=50",
        "# Access Grafana",
        "kubectl port-forward -n otel-demo svc/grafana 3000:80"
      ]
    }
  ],
  "verification_commands": [
    "# Verify gRPC metrics in Prometheus",
    "kubectl port-forward -n otel-demo svc/prometheus 9090:9090 & sleep 5; curl -s 'http://localhost:9090/api/v1/label/__name__/values' | jq -r '.data[]' | grep -i grpc",
    "kubectl get pods -n gremlin -l app.kubernetes.io/name=gremlin -o wide"
  ],
  "troubleshooting": {
    "no_grpc_metrics": [
      "Check collector logs: kubectl logs -n otel-demo -l app.kubernetes.io/name=opentelemetry-collector",
      "Verify config was applied: kubectl get configmap -n otel-demo otel-collector -o yaml"
    ],
    "pods_not_starting": [
      "Check pod status: kubectl get pods -n otel-demo",
      "Describe pod: kubectl describe pod <pod-name> -n otel-demo"
    ]
  },
  "cleanup_commands": [
    "# Remove Gremlin deployment",
    "helm uninstall gremlin -n gremlin",
    "kubectl delete namespace gremlin",
    "# Remove Gremlin annotations",
    "kubectl delete -f opentelemetry-demo-gremlin-annotations.yaml",
    "kubectl delete -f frontend-gremlin-annotation.yaml"
  ],
  "notes": [
    "This setup assumes the OpenTelemetry demo was already installed in the cluster",
    "The patches were applied to fix specific issues with the demo",
    "Grafana dashboards may take a few minutes to show metrics after the collector restarts",
    "Gremlin will deploy one pod per node in the cluster (DaemonSet)",
    "Gremlin services should appear in the Gremlin UI after a few minutes",
    "Verify Gremlin agent logs with: kubectl logs -n gremlin -l app.kubernetes.io/name=gremlin"
  ]
}
