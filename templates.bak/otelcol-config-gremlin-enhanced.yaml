# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# Enhanced OpenTelemetry Collector configuration with Gremlin experiment tracking
# Simplified version that focuses on core telemetry components

opentelemetry-collector:
  extraEnvsFrom:
    - secretRef:
        name: otelcol-keys
  
  config:
    connectors:
      spanmetrics: {}  # Converts traces to metrics
    
    exporters:
      prometheus:
        endpoint: "${env:MY_POD_IP}:8889"  # Expose metrics endpoint for Prometheus
      otlp:
        endpoint: 'opentelemetry-demo-jaeger-collector:4317'
        tls:
          insecure: true
      opensearch:
        http:
          endpoint: http://otel-demo-opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      debug: {}
    
    extensions:
      health_check:
        endpoint: "${env:MY_POD_IP}:13133"
    
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.pod.name
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
          - action: upsert
            key: deployment.environment
            value: otel
          - action: upsert
            key: gremlin.experiment.enabled
            value: "true"
    
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "${env:MY_POD_IP}:4317"
          http:
            cors:
              allowed_origins:
                - http://*
                - https://*
            endpoint: "${env:MY_POD_IP}:4318"
      jaeger:
        protocols:
          grpc:
            endpoint: "${env:MY_POD_IP}:14250"
          thrift_http:
            endpoint: "${env:MY_POD_IP}:14268"
    
    service:
      extensions:
        - health_check
      pipelines:
        logs:
          exporters:
            - opensearch
            - debug
          processors:
            - k8sattributes
            - batch
            - resource
          receivers:
            - otlp
        
        metrics:
          exporters:
            - prometheus
            - debug
          processors:
            - k8sattributes
            - batch
            - resource
          receivers:
            - otlp
            - spanmetrics
        
        traces:
          exporters:
            - otlp
            - debug
            - spanmetrics
          processors:
            - k8sattributes
            - batch
            - resource
          receivers:
            - otlp
            - jaeger
      
      telemetry:
        metrics:
          address: "${env:MY_POD_IP}:8888"

# Keep the frontend proxy configuration
components:
  frontendProxy:
    service:
      type: LoadBalancer
