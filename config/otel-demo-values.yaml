opentelemetry-collector:
  config:
    exporters:
      debug: {}
      prometheus:
        endpoint: "0.0.0.0:8889"
      otlp/jaeger:
        endpoint: "otel-demo-jaeger-collector:4317"
        tls:
          insecure: true
      opensearch:
        http:
          endpoint: http://otel-demo-opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true

    processors:
      batch: {}
      memory_limiter:
        check_interval: 1s
        limit_mib: 400
        spike_limit_mib: 100
      k8sattributes:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
      resource:
        attributes:
          - action: insert
            from_attribute: k8s.pod.uid
            key: service.instance.id

    connectors:
      spanmetrics: {}

    service:
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, resource, batch]
          exporters: [debug, otlp/jaeger, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [memory_limiter, k8sattributes, resource, batch]
          exporters: [otlphttp/prometheus, debug]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, resource, batch]
          exporters: [opensearch, debug]

  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

loadgenerator:
  env:
    - name: LOCUST_HOST
      value: "http://otel-demo-frontendproxy:8080"
    - name: LOCUST_HEADLESS
      value: "false"
    - name: LOCUST_WEB_HOST
      value: "0.0.0.0"
    - name: LOCUST_WEB_PORT
      value: "8089"
    - name: LOCUST_USERS
      value: "5"
    - name: LOCUST_SPAWN_RATE
      value: "1"
    - name: LOCUST_BROWSER_TRAFFIC_ENABLED
      value: "true"

frontendproxy:
  enabled: true
  service:
    type: LoadBalancer
    ports:
      - port: 8080
        targetPort: 8080
  envoy:
    config:
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: local_service
                    domains: ["*"]
                    routes:
                    - match: { prefix: "/" }
                      route: { cluster: frontend_service, timeout: "0s" }
                http_filters:
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        clusters:
        - name: frontend_service
          connect_timeout: 5s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: frontend_service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: otel-demo-frontend
                      port_value: 8080

  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
