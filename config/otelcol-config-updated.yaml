# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# Updated OpenTelemetry Collector configuration with spanmetrics and proper Prometheus exporter
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: otel-demo
spec:
  config:
    exporters:
      debug: {}
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: opentelemetry
        resource_to_telemetry_conversion:
          enabled: true
      otlp/jaeger:
        endpoint: "otel-demo-jaeger-collector:4317"
        tls:
          insecure: true
      opensearch:
        http:
          endpoint: http://otel-demo-opensearch:9200
          tls:
            insecure: true
        logs_index: otel

    processors:
      batch: {}
      memory_limiter:
        check_interval: 1s
        limit_mib: 400
        spike_limit_mib: 100
      k8sattributes:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
      resource:
        attributes:
          - action: insert
            from_attribute: k8s.pod.uid
            key: service.instance.id

    connectors:
      spanmetrics:
        dimensions:
          - http.method
          - http.status_code
          - rpc.method
          - rpc.service
          - rpc.system
          - rpc.grpc.status_code
        dimensions_cache_size: 1000
        aggregation_temporality: CUMULATIVE
        metrics_flush_interval: 15s
        namespace: ""
        metrics_expiration: 5m
        metrics:
          rpc.server.duration:
            enabled: true
            description: Measures the duration of inbound RPC.
            unit: ms
            histogram:
              explicit:
                boundaries: [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000]
          rpc.server.requests_per_rpc:
            enabled: true
            description: Measures the number of messages received per RPC.
            unit: "{count}"
            histogram:
              explicit:
                boundaries: [0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
          rpc.server.responses_per_rpc:
            enabled: true
            description: Measures the number of messages sent per RPC.
            unit: "{count}"
            histogram:
              explicit:
                boundaries: [0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]

    extensions:
      health_check: {}
      pprof: {}
      zpages: {}

    service:
      telemetry:
        metrics:
          level: detailed
          address: 0.0.0.0:8888
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [k8sattributes, batch]
          exporters: [otlp/jaeger, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [batch]
          exporters: [prometheus, debug]
        metrics/grpc:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [opensearch, debug]
