{
  "eks_cluster_fixes": {
    "vpc_cni_issues": {
      "description": "Issues with VPC CNI addon that prevented nodes from becoming ready",
      "fixes": [
        {
          "issue": "IAM Permissions",
          "description": "VPC CNI plugin lacked proper IAM permissions to manage ENIs and IP addresses",
          "solution": "Add a dedicated service account for VPC CNI with proper permissions",
          "implementation": {
            "yaml_config": {
              "iam": {
                "serviceAccounts": [
                  {
                    "metadata": {
                      "name": "aws-node",
                      "namespace": "kube-system"
                    },
                    "wellKnownPolicies": {
                      "awsVpcCni": true
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "issue": "OIDC Configuration",
          "description": "VPC CNI needed OIDC to assume IAM role for permissions",
          "solution": "Explicitly enable OIDC in cluster configuration",
          "implementation": {
            "yaml_config": {
              "iam": {
                "withOIDC": true
              }
            }
          }
        }
      ]
    },
    "security_group_issues": {
      "description": "Security group configuration issues that prevented proper communication",
      "fixes": [
        {
          "issue": "Security Group Attachment",
          "description": "Node group needed both cluster security group and node security group",
          "solution": "Explicitly attach both security groups to node group",
          "implementation": {
            "yaml_config": {
              "managedNodeGroups": [
                {
                  "securityGroups": {
                    "attachIDs": [
                      "sg-0a499ed85cbdf45c5"
                    ]
                  }
                }
              ]
            },
            "post_creation_script": [
              "# Get the cluster security group ID",
              "CLUSTER_SG_ID=$(aws eks describe-cluster --name ${CLUSTER_NAME} --region ${AWS_REGION} --query \"cluster.resourcesVpcConfig.clusterSecurityGroupId\" --output text)",
              "",
              "# Get the node security group ID",
              "NODE_SG_ID=\"sg-0a499ed85cbdf45c5\"",
              "",
              "# Allow cluster security group to communicate with node security group",
              "aws ec2 authorize-security-group-ingress \\",
              "  --group-id ${NODE_SG_ID} \\",
              "  --protocol all \\",
              "  --port 0-65535 \\",
              "  --source-group ${CLUSTER_SG_ID}",
              "",
              "# Allow node security group to communicate with cluster security group",
              "aws ec2 authorize-security-group-ingress \\",
              "  --group-id ${CLUSTER_SG_ID} \\",
              "  --protocol all \\",
              "  --port 0-65535 \\",
              "  --source-group ${NODE_SG_ID}"
            ]
          }
        }
      ]
    },
    "subnet_configuration": {
      "description": "Subnet configuration issues that affected node connectivity",
      "fixes": [
        {
          "issue": "Node Group Subnet Usage",
          "description": "Working node group only used public subnets, not private subnets",
          "solution": "Explicitly specify only public subnets for node group",
          "implementation": {
            "yaml_config": {
              "managedNodeGroups": [
                {
                  "subnets": [
                    "subnet-0fe7be30ec2528c4c",
                    "subnet-08038efe886c31791",
                    "subnet-0135b61262e48f4d6"
                  ]
                }
              ]
            }
          }
        }
      ]
    },
    "ami_configuration": {
      "description": "AMI configuration for node group",
      "fixes": [
        {
          "issue": "AMI Type",
          "description": "Working cluster used specific AMI type",
          "solution": "Explicitly specify AMI type for node group",
          "implementation": {
            "yaml_config": {
              "managedNodeGroups": [
                {
                  "ami": "AL2023_x86_64_STANDARD"
                }
              ]
            }
          }
        }
      ]
    },
    "kubernetes_version": {
      "description": "Kubernetes version differences",
      "fixes": [
        {
          "issue": "Kubernetes Version",
          "description": "Working cluster used Kubernetes 1.31",
          "solution": "Use the same Kubernetes version as the working cluster",
          "implementation": {
            "yaml_config": {
              "metadata": {
                "version": "1.31"
              }
            }
          }
        }
      ]
    }
  },
  "working_cluster_reference": {
    "cluster_name": "jheller-otel-redux",
    "security_groups": {
      "cluster_sg": "Dynamically created by CloudFormation",
      "node_sg": "sg-0a499ed85cbdf45c5"
    },
    "subnets": {
      "public": [
        "subnet-0fe7be30ec2528c4c",
        "subnet-08038efe886c31791",
        "subnet-0135b61262e48f4d6"
      ],
      "private": [
        "subnet-0403fbdc0a75620d6",
        "subnet-0dcb40d6b8fad2c03",
        "subnet-0d36418b808d97976"
      ]
    },
    "node_group_config": {
      "desired_capacity": 5,
      "min_size": 5,
      "max_size": 8,
      "instance_types": [
        "t3.medium",
        "t3a.medium",
        "t2.medium"
      ],
      "ami_type": "AL2023_x86_64_STANDARD",
      "capacity_type": "SPOT"
    }
  }
}
